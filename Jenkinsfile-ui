pipeline {
  agent { docker { image 'ci-agent' } }

  parameters {
    string(name: 'XRAY_PROJECT_KEY',  defaultValue: 'QT2',  description: 'Xray Project Key')
    string(name: 'XRAY_TESTPLAN_KEY', defaultValue: '',     description: 'Opsional: Test Plan Key (kosongkan jika tidak dipakai)')
  }

  environment {
    XRAY_CLIENT_ID     = credentials('xray-client-id')
    XRAY_CLIENT_SECRET = credentials('xray-client-secret')
  }

  stages {
    stage('Clone') {
      steps { checkout scm }
    }

    stage('Run Maven Test') {
      steps {
        dir('ui') {
          sh '''
            set -e
            mkdir -p reports
            mvn -B clean test

            # pastikan ada report JUnit
            ls target/surefire-reports/TEST-*.xml >/dev/null 2>&1 || {
              echo "ERROR: Tidak ada JUnit report di ui/target/surefire-reports"
              exit 1
            }
          '''
        }
      }
      post {
        always {
          junit 'ui/target/surefire-reports/*.xml'
          archiveArtifacts artifacts: 'ui/target/surefire-reports/**', fingerprint: true
        }
      }
    }
    stage('Publish Results to Xray') {
      steps {
        dir('ui') {
          sh '''
            set -eu
            mkdir -p reports

            # 1) Auth ke Xray
            XRAY_TOKEN=$(
              printf '{"client_id":"%s","client_secret":"%s"}' "$XRAY_CLIENT_ID" "$XRAY_CLIENT_SECRET" |
              curl -fsS -X POST "https://xray.cloud.getxray.app/api/v2/authenticate" \
                   -H "Content-Type: application/json" \
                   --data @- | tr -d '"'
            )
            [ -n "$XRAY_TOKEN" ] || { echo "ERROR: gagal mendapatkan token Xray"; exit 1; }

            # 2) Cari file cucumber-reports/*.xml
            FILES=$(ls target/cucumber-reports/*.xml 2>/dev/null || true)
            [ -n "$FILES" ] || { echo "ERROR: Tidak ada file report di target/cucumber-reports"; exit 1; }

            echo "Menemukan file report:"
            echo "$FILES" | sed 's/^/ - /'

            # 3) Build query string dinamis
            QS="projectKey=${XRAY_PROJECT_KEY}"
            [ -n "${XRAY_TESTPLAN_KEY:-}" ] && QS="${QS}&testPlanKey=${XRAY_TESTPLAN_KEY}"

            # 4) Upload semua file cucumber report ke Xray
            CURL_ARGS=""
            for f in $FILES; do
              CURL_ARGS="$CURL_ARGS -F file=@$f"
            done

            HTTP_CODE=$(
              curl -sS -w "%{http_code}" -o reports/xray-import.json \
                -X POST "https://xray.cloud.getxray.app/api/v2/import/execution/junit?${QS}" \
                -H "Authorization: Bearer ${XRAY_TOKEN}" \
                -H "Content-Type: multipart/form-data" \
                $CURL_ARGS
            )

            case "$HTTP_CODE" in
              200|201) : ;;
              *)  echo "ERROR: Xray import gagal (HTTP $HTTP_CODE)"
                  echo "--- Response ---"
                  cat reports/xray-import.json || true
                  exit 1
                  ;;
            esac
          '''
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'ui/reports/xray-import.json', fingerprint: true
        }
      }
    }
  }
}
