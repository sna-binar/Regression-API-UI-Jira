pipeline {
  agent {
    docker { image 'ci-agent' }
  }
  environment {
    TEST_PLAN_KEY = 'QT2-2'
  }
  stages {
    stage('Clone') {
      steps {
        checkout scm
      }
    }
    stage('API (Newman)') {
      steps {
        sh '''
          set -e
          mkdir -p reports
          npm i -g newman-reporter-junitfull || true

          newman run api/*.postman_collection.json \
            -e api/*.postman_environment.json \
            --reporters cli,junitfull \
            --reporter-junitfull-export reports/junit-api.xml

          echo '[DEBUG] Peek JUnit head:'
          head -n 25 reports/junit-api.xml || true
        '''
      }
      post {
        always {
          // tampilkan hasil di Jenkins UI
          junit 'reports/*.xml'
          archiveArtifacts artifacts: 'reports/**', fingerprint: true
        }
      }
    }
    stage('Publish Results to Xray') {
      environment {
        XRAY_CLIENT_ID     = credentials('xray-client-id')
        XRAY_CLIENT_SECRET = credentials('xray-client-secret')
      }
      steps {
        sh '''
    set -eu
    mkdir -p reports

    # Pastikan file JUnit ada
    [ -s reports/junit-api.xml ] || { echo "ERROR: reports/junit-api.xml not found/empty"; exit 1; }

    # 1) AUTH (kirim JSON via stdin biar aman dari kutip)
    XRAY_TOKEN=$(
      printf '{"client_id":"%s","client_secret":"%s"}' "$XRAY_CLIENT_ID" "$XRAY_CLIENT_SECRET" |
      curl -fsS -X POST "https://xray.cloud.getxray.app/api/v2/authenticate" \
           -H "Content-Type: application/json" \
           --data @- | tr -d '"'
    )
    echo "[DEBUG] XRAY_TOKEN length: ${#XRAY_TOKEN}"
    [ -n "$XRAY_TOKEN" ] || { echo "ERROR: token kosong (cek Client ID/Secret)"; exit 1; }

    # 2) IMPORT JUnit ke Xray (tanpa info/metadata)
    HTTP_CODE=$(curl -sS -w "%{http_code}" -o reports/xray-import.json \
      -X POST "https://xray.cloud.getxray.app/api/v2/import/execution/junit?projectKey=QT2" \
      -H "Authorization: Bearer ${XRAY_TOKEN}" \
      -F "file=@reports/junit-api.xml")

    echo "[DEBUG] HTTP_CODE=$HTTP_CODE"
    [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "201" ] || {
      echo "Upload failed with HTTP $HTTP_CODE"
      echo "--- Response ---"
      cat reports/xray-import.json || true
      exit 1
    }

    echo "[DEBUG] Response -> reports/xray-import.json"
    head -c 1000 reports/xray-import.json || true
    '''
      }
      post {
        always { archiveArtifacts artifacts: 'reports/xray-import.json', fingerprint: true }
      }
    }
  }
}
